generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  id                            String                     @id
  createdAt                     DateTime                   @default(now())
  updatedAt                     DateTime
  name                          String
  ownerName                     String?
  email                         String                     @unique
  phone                         String?
  address                       String?
  website                       String?
  description                   String?
  logo                          String?
  settings                      Json?
  type                          BusinessType               @default(HAIR_SALON)
  status                        BusinessStatus             @default(PENDING)
  passwordHash                  String
  allowStaffToViewAllBookings   Boolean                    @default(false)
  restrictStaffToViewAllClients Boolean                    @default(false)
  restrictStaffToViewAllNotes   Boolean                    @default(false)
  requireAdminCancelApproval    Boolean                    @default(false)
  slug                          String                     @unique
  BusinessHours                 BusinessHours[]
  BusinessSlotConfiguration     BusinessSlotConfiguration?
  Client                        Client[]
  ClientRelationship            ClientRelationship[]
  Service                       Service[]
  SlotTemplate                  SlotTemplate[]
  Staff                         Staff[]
  appointments                  appointments[]
  business_verifications        business_verifications?
  data_access_logs              data_access_logs[]
  feature_configurations        feature_configurations?
  relationship_notes            relationship_notes[]
  security_settings             security_settings?
  service_categories            service_categories[]
  staff_permissions             staff_permissions[]
  visit_history                 visit_history[]
  system_admins                 system_admins[]            @relation("SystemAdminToBusinesses")

  @@index([email])
  @@index([slug])
}

model BusinessHours {
  id              String   @id
  businessId      String
  dayOfWeek       Int
  isOpen          Boolean
  startTime       String?
  endTime         String?
  lunchBreakEnd   String?
  lunchBreakStart String?
  Business        Business @relation(fields: [businessId], references: [id])
}

model Client {
  id                 String               @id
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  name               String
  email              String               @unique
  phone              String?
  businessId         String
  preferences        Json?
  status             String?              @default("ACTIVE")
  notes              String?
  lastVisit          DateTime?
  isDeleted          Boolean              @default(false)
  isEligible         Boolean              @default(true) // ✅ NEW: Cliente apto para aulas
  Business           Business             @relation(fields: [businessId], references: [id])
  ClientRelationship ClientRelationship[]
  appointments       appointments[]
  payment_methods    payment_methods[]
  relationship_notes relationship_notes[]
  reviews            reviews[]
  visit_history      visit_history[]

  @@index([businessId])
  @@index([email])
  @@index([isDeleted])
  @@index([lastVisit])
  @@index([status])
  @@index([isEligible]) // ✅ NEW: Index para filtros rápidos
}

model Customer {
  id                  String             @id
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  name                String
  email               String             @unique
  phone               String?
  password            String
  status              String             @default("ACTIVE")
  emailVerified       Boolean            @default(false)
  emailVerifiedAt     DateTime?
  lastLogin           DateTime?
  preferences         Json?
  isDeleted           Boolean            @default(false)
  onboardingCompleted Boolean            @default(false)
  marketingConsent    Boolean            @default(false)
  favorites           CustomerFavorite[]

  @@index([email])
  @@index([isDeleted])
  @@index([status])
  @@index([lastLogin])
}

model CustomerFavorite {
  id         String   @id @default(cuid())
  customerId String
  businessId String
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, businessId])
  @@index([customerId])
  @@index([businessId])
}

model ClientRelationship {
  id                 String               @id
  clientId           String
  businessId         String
  staffId            String?
  type               String?
  status             String?
  notes              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  Business           Business             @relation(fields: [businessId], references: [id])
  Client             Client               @relation(fields: [clientId], references: [id])
  Staff              Staff?               @relation(fields: [staffId], references: [id])
  relationship_notes relationship_notes[]

  @@index([businessId])
  @@index([clientId])
  @@index([staffId])
}

model Provider {
  id    String @id
  name  String
  email String @unique
}

model Service {
  id                   String              @id @default(cuid())
  createdAt            DateTime            @default(now())
  updatedAt            DateTime
  name                 String
  description          String?
  duration             Int
  price                Float
  businessId           String
  categoryId           String?
  image                String?
  address              String?
  anyTimeAvailable     Boolean?            @default(false)
  availableDays        Int[]               @default([])
  endTime              String?
  location             String?
  maxAdvanceDays       Int                 @default(30)
  maxCapacity          Int?                @default(1)
  minAdvanceHours      Int                 @default(24)
  slots                Json?
  startTime            String?
  // slotConfiguration    Json? // ❌ Column doesn't exist in database
  // slotsNeeded          Int                 @default(1) // ❌ Column doesn't exist in database
  // availabilitySchedule Json? // ❌ Column doesn't exist in database
  // capacity             Int                 @default(1) // ❌ Column doesn't exist in database
  // eventType            EventType           @default(INDIVIDUAL) // ❌ Column doesn't exist in database
  isActive             Boolean             @default(true)
  Business             Business            @relation(fields: [businessId], references: [id])
  service_categories   service_categories? @relation(fields: [categoryId], references: [id])
  appointments         appointments[]
  Staff                Staff[]             @relation("StaffServices")

  @@index([businessId])
  @@index([categoryId])
  @@index([location])
  @@index([isActive])
  // @@index([slotsNeeded]) // ❌ Column doesn't exist in database
  // @@index([eventType]) // ❌ Column doesn't exist in database
}

model Staff {
  id                  String                @id
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  name                String
  email               String                @unique
  phone               String?
  password            String
  role                StaffRole             @default(STANDARD)
  businessId          String
  ClientRelationship  ClientRelationship[]
  Business            Business              @relation(fields: [businessId], references: [id])
  StaffAvailability   StaffAvailability?
  StaffUnavailability StaffUnavailability[]
  appointments        appointments[]
  data_access_logs    data_access_logs[]
  relationship_notes  relationship_notes[]
  staff_permissions   staff_permissions[]
  Service             Service[]             @relation("StaffServices")

  @@index([businessId])
  @@index([email])
}

model StaffAvailability {
  id           String   @id
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  staffId      String   @unique
  schedule     Json     @default("{}")
  slotSchedule Json?
  workingSlots Json?
  Staff        Staff    @relation(fields: [staffId], references: [id])

  @@index([staffId])
}

model StaffUnavailability {
  id        String   @id
  staffId   String
  start     DateTime
  end       DateTime
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  Staff     Staff    @relation(fields: [staffId], references: [id])
}

model BusinessSlotConfiguration {
  id                  String   @id
  businessId          String   @unique
  slotDurationMinutes Int      @default(30)
  slotsPerDay         Int      @default(48)
  startHour           Int      @default(0)
  endHour             Int      @default(24)
  timeZone            String   @default("UTC")
  slotConfiguration   Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime
  Business            Business @relation(fields: [businessId], references: [id])

  @@index([businessId])
}

model SlotTemplate {
  id          String    @id @default(cuid())
  name        String
  description String?
  // slotsNeeded Int // ❌ Column doesn't exist in database
  duration    Int
  category    String?
  isDefault   Boolean   @default(false)
  isActive    Boolean   @default(true)
  businessId  String?
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Business    Business? @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@index([isDefault])
  @@index([category])
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model admin_activities {
  id            String        @id
  adminId       String
  action        String
  details       Json?
  createdAt     DateTime      @default(now())
  system_admins system_admins @relation(fields: [adminId], references: [id])
}

model appointments {
  id                     String                  @id
  createdAt              DateTime                @default(now())
  updatedAt              DateTime
  scheduledFor           DateTime
  duration               Int
  status                 AppointmentStatus       @default(PENDING)
  notes                  String?
  staffId                String
  clientId               String
  serviceId              String
  businessId             String
  recurringAppointmentId String?
  slotInfo               Json?
  // endSlot                Int? // Commented out - doesn't exist in DB
  // slotDetails            Json? // ❌ Column doesn't exist in database
  // slotsUsed              Int?
  // startSlot              Int?
  Business               Business                @relation(fields: [businessId], references: [id])
  Client                 Client                  @relation(fields: [clientId], references: [id])
  recurring_appointments recurring_appointments? @relation(fields: [recurringAppointmentId], references: [id])
  Service                Service                 @relation(fields: [serviceId], references: [id])
  Staff                  Staff                   @relation(fields: [staffId], references: [id])
  relationship_notes     relationship_notes[]
  reviews                reviews?

  @@index([businessId])
  @@index([clientId])
  @@index([recurringAppointmentId])
  @@index([serviceId])
  @@index([staffId])
  // @@index([startSlot, endSlot]) // Commented out - endSlot doesn't exist in DB
  @@index([scheduledFor])
}

model backup_status {
  id        String   @id
  status    String
  timestamp DateTime @default(now())
  details   String?
  filename  String
  checksum  String?
  size      BigInt?
  duration  Int?

  @@index([status])
  @@index([timestamp])
}

model base_model {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime
  isDeleted Boolean  @default(false)
}

model business_verifications {
  id            String             @id
  businessId    String             @unique
  status        VerificationStatus
  submittedAt   DateTime           @default(now())
  verifiedAt    DateTime?
  verifiedBy    String?
  documents     Json?
  notes         String?
  isDeleted     Boolean            @default(false)
  Business      Business           @relation(fields: [businessId], references: [id])
  system_admins system_admins?     @relation(fields: [verifiedBy], references: [id])

  @@index([businessId])
  @@index([status])
}

model data_access_logs {
  id         String         @id
  businessId String
  staffId    String
  accessType DataAccessType
  resource   String
  reason     String
  ipAddress  String?
  userAgent  String?
  successful Boolean
  timestamp  DateTime       @default(now())
  Business   Business       @relation(fields: [businessId], references: [id])
  Staff      Staff          @relation(fields: [staffId], references: [id])
}

model feature_configurations {
  id         String     @id
  businessId String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime
  Business   Business   @relation(fields: [businessId], references: [id])
  features   features[]
}

model feature_options {
  id        String   @id
  key       String
  name      String
  enabled   Boolean  @default(true)
  featureId String
  createdAt DateTime @default(now())
  updatedAt DateTime
  features  features @relation(fields: [featureId], references: [id])

  @@unique([featureId, key])
}

model features {
  id                     String                 @id
  key                    String
  name                   String
  description            String?
  enabled                Boolean                @default(true)
  requiresApproval       Boolean                @default(false)
  configurationId        String
  createdAt              DateTime               @default(now())
  updatedAt              DateTime
  feature_options        feature_options[]
  feature_configurations feature_configurations @relation(fields: [configurationId], references: [id])

  @@unique([configurationId, key])
}

model notifications {
  id        String    @id
  userId    String
  type      String
  message   String
  read      Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  metadata  Json?
}

model payment_methods {
  id        String   @id
  clientId  String
  type      String
  details   Json
  isDefault Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  Client    Client   @relation(fields: [clientId], references: [id])
}

model recurring_appointments {
  id           String             @id
  frequency    RecurringFrequency
  interval     Int
  daysOfWeek   Int[]
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime
  appointments appointments[]
}

model relationship_notes {
  id                   String              @id
  noteType             NoteType
  content              String
  createdById          String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime
  businessId           String
  clientId             String
  appointmentId        String?
  clientRelationshipId String?
  appointments         appointments?       @relation(fields: [appointmentId], references: [id])
  Business             Business            @relation(fields: [businessId], references: [id])
  Client               Client              @relation(fields: [clientId], references: [id])
  ClientRelationship   ClientRelationship? @relation(fields: [clientRelationshipId], references: [id])
  Staff                Staff               @relation(fields: [createdById], references: [id])
}

model reviews {
  id            String       @id
  rating        Int
  comment       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  clientId      String
  appointmentId String       @unique
  appointments  appointments @relation(fields: [appointmentId], references: [id])
  Client        Client       @relation(fields: [clientId], references: [id])
}

model security_settings {
  id                        String   @id
  businessId                String   @unique
  requireMFA                Boolean  @default(false)
  sensitiveDataAccessExpiry Int?
  autoRevokeInactiveAccess  Boolean  @default(true)
  inactivityThreshold       Int      @default(30)
  enforceIPRestriction      Boolean  @default(false)
  allowedIPs                String[]
  requireAccessReason       Boolean  @default(true)
  enableAccessLogs          Boolean  @default(true)
  defaultDataRetentionDays  Int      @default(365)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime
  isDeleted                 Boolean  @default(false)
  Business                  Business @relation(fields: [businessId], references: [id])

  @@index([businessId])
}

model service_categories {
  id             String    @id
  name           String
  description    String?
  color          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime
  isDeleted      Boolean   @default(false)
  createdBy      String?
  lastModifiedBy String?
  businessId     String
  Service        Service[]
  Business       Business  @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@index([createdBy])
  @@index([isDeleted])
  @@index([lastModifiedBy])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model staff_permissions {
  id          String      @id
  staffId     String
  businessId  String
  resource    String
  accessLevel AccessLevel
  conditions  Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  expiresAt   DateTime?
  Business    Business    @relation(fields: [businessId], references: [id])
  Staff       Staff       @relation(fields: [staffId], references: [id])

  @@unique([staffId, resource])
}

model system_admins {
  id                     String                   @id
  email                  String                   @unique
  name                   String
  role                   AdminRole
  passwordHash           String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime
  isDeleted              Boolean                  @default(false)
  admin_activities       admin_activities[]
  business_verifications business_verifications[]
  system_settings        system_settings[]
  Business               Business[]               @relation("SystemAdminToBusinesses")

  @@index([email])
}

model system_settings {
  id             String        @id
  key            String        @unique
  value          Json
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  lastModifiedBy String
  isDeleted      Boolean       @default(false)
  system_admins  system_admins @relation(fields: [lastModifiedBy], references: [id])

  @@index([key])
}

model users {
  id            String     @id
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      accounts[]
  sessions      sessions[]
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model visit_history {
  id               String   @id
  visitDate        DateTime
  serviceType      String
  staffNotes       String?
  clientFeedback   String?
  followUpRequired Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  businessId       String
  clientId         String
  Business         Business @relation(fields: [businessId], references: [id])
  Client           Client   @relation(fields: [clientId], references: [id])
}

enum AccessLevel {
  FULL
  RESTRICTED
  BASIC
  NONE
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  SUPPORT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
  ACCEPTED
  REJECTED
}

enum BusinessStatus {
  PENDING
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum BusinessType {
  HAIR_SALON
  BARBERSHOP
  NAIL_SALON
  PHYSIOTHERAPY
  PSYCHOLOGY
  OTHER
}

enum DataAccessType {
  VIEW
  EDIT
  EXPORT
  DELETE
}

enum NoteType {
  GENERAL
  PREFERENCE
  INCIDENT
  FEEDBACK
  FOLLOW_UP
  SPECIAL_REQUEST
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum RecurringFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum StaffRole {
  ADMIN
  MANAGER
  STANDARD
}

enum EventType {
  INDIVIDUAL
  GROUP
}

enum VerificationStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
}
